classdef Diagnostic < robotics.ros.Message
    %Diagnostic MATLAB implementation of irobotcreate2/Diagnostic
    %   This class was automatically generated by
    %   robotics.ros.msg.internal.gen.MessageClassGenerator.
    
    %   Copyright 2016 The MathWorks, Inc.
    
    %#ok<*INUSD>
    
    properties (Constant)
        MessageType = 'irobotcreate2/Diagnostic' % The ROS message type
    end
    
    properties (Constant, Hidden)
        MD5Checksum = 'c5ab1a026621d8d87d7316b146c2ca2a' % The MD5 Checksum of the message definition
    end
    
    properties (Access = protected)
        JavaMessage % The Java message object
    end
    
    properties (Constant, Access = protected)
        StdMsgsHeaderClass = robotics.ros.msg.internal.MessageFactory.getClassForType('std_msgs/Header') % Dispatch to MATLAB class for message type std_msgs/Header
    end
    
    properties (Dependent)
        Header
        LeftMotorCurrent
        RightMotorCurrent
        MainBrushCurrent
        SideBrushCurrent
        LeftMotorOvercurrent
        RightMotorOvercurrent
        MainBrushOvercurrent
        SideBrushOvercurrent
        BatteryCurrent
        BatteryVoltage
        BatteryTemperature
    end
    
    properties (Access = protected)
        Cache = struct('Header', []) % The cache for fast data access
    end
    
    properties (Constant, Hidden)
        PropertyList = {'BatteryCurrent', 'BatteryTemperature', 'BatteryVoltage', 'Header', 'LeftMotorCurrent', 'LeftMotorOvercurrent', 'MainBrushCurrent', 'MainBrushOvercurrent', 'RightMotorCurrent', 'RightMotorOvercurrent', 'SideBrushCurrent', 'SideBrushOvercurrent'} % List of non-constant message properties
        ROSPropertyList = {'battery_current', 'battery_temperature', 'battery_voltage', 'header', 'left_motor_current', 'left_motor_overcurrent', 'main_brush_current', 'main_brush_overcurrent', 'right_motor_current', 'right_motor_overcurrent', 'side_brush_current', 'side_brush_overcurrent'} % List of non-constant ROS message properties
    end
    
    methods
        function obj = Diagnostic(msg)
            %Diagnostic Construct the message object Diagnostic
            import com.mathworks.toolbox.robotics.ros.message.MessageInfo;
            
            % Support default constructor
            if nargin == 0
                obj.JavaMessage = obj.createNewJavaMessage;
                return;
            end
            
            % Construct appropriate empty array
            if isempty(msg)
                obj = obj.empty(0,1);
                return;
            end
            
            % Make scalar construction fast
            if isscalar(msg)
                % Check for correct input class
                if ~MessageInfo.compareTypes(msg(1), obj.MessageType)
                    error(message('robotics:ros:message:NoTypeMatch', obj.MessageType, ...
                        char(MessageInfo.getType(msg(1))) ));
                end
                obj.JavaMessage = msg(1);
                return;
            end
            
            % Check that this is a vector of scalar messages. Since this
            % is an object array, use arrayfun to verify.
            if ~all(arrayfun(@isscalar, msg))
                error(message('robotics:ros:message:MessageArraySizeError'));
            end
            
            % Check that all messages in the array have the correct type
            if ~all(arrayfun(@(x) MessageInfo.compareTypes(x, obj.MessageType), msg))
                error(message('robotics:ros:message:NoTypeMatchArray', obj.MessageType));
            end
            
            % Construct array of objects if necessary
            objType = class(obj);
            for i = 1:length(msg)
                obj(i,1) = feval(objType, msg(i)); %#ok<AGROW>
            end
        end
        
        function header = get.Header(obj)
            %get.Header Get the value for property Header
            if isempty(obj.Cache.Header)
                obj.Cache.Header = feval(obj.StdMsgsHeaderClass, obj.JavaMessage.getHeader);
            end
            header = obj.Cache.Header;
        end
        
        function set.Header(obj, header)
            %set.Header Set the value for property Header
            validateattributes(header, {obj.StdMsgsHeaderClass}, {'nonempty', 'scalar'}, 'Diagnostic', 'header');
            
            obj.JavaMessage.setHeader(header.getJavaObject);
            
            % Update cache if necessary
            if ~isempty(obj.Cache.Header)
                obj.Cache.Header.setJavaObject(header.getJavaObject);
            end
        end
        
        function leftmotorcurrent = get.LeftMotorCurrent(obj)
            %get.LeftMotorCurrent Get the value for property LeftMotorCurrent
            leftmotorcurrent = int16(obj.JavaMessage.getLeftMotorCurrent);
        end
        
        function set.LeftMotorCurrent(obj, leftmotorcurrent)
            %set.LeftMotorCurrent Set the value for property LeftMotorCurrent
            validateattributes(leftmotorcurrent, {'numeric'}, {'nonempty', 'scalar'}, 'Diagnostic', 'leftmotorcurrent');
            
            obj.JavaMessage.setLeftMotorCurrent(leftmotorcurrent);
        end
        
        function rightmotorcurrent = get.RightMotorCurrent(obj)
            %get.RightMotorCurrent Get the value for property RightMotorCurrent
            rightmotorcurrent = int16(obj.JavaMessage.getRightMotorCurrent);
        end
        
        function set.RightMotorCurrent(obj, rightmotorcurrent)
            %set.RightMotorCurrent Set the value for property RightMotorCurrent
            validateattributes(rightmotorcurrent, {'numeric'}, {'nonempty', 'scalar'}, 'Diagnostic', 'rightmotorcurrent');
            
            obj.JavaMessage.setRightMotorCurrent(rightmotorcurrent);
        end
        
        function mainbrushcurrent = get.MainBrushCurrent(obj)
            %get.MainBrushCurrent Get the value for property MainBrushCurrent
            mainbrushcurrent = int16(obj.JavaMessage.getMainBrushCurrent);
        end
        
        function set.MainBrushCurrent(obj, mainbrushcurrent)
            %set.MainBrushCurrent Set the value for property MainBrushCurrent
            validateattributes(mainbrushcurrent, {'numeric'}, {'nonempty', 'scalar'}, 'Diagnostic', 'mainbrushcurrent');
            
            obj.JavaMessage.setMainBrushCurrent(mainbrushcurrent);
        end
        
        function sidebrushcurrent = get.SideBrushCurrent(obj)
            %get.SideBrushCurrent Get the value for property SideBrushCurrent
            sidebrushcurrent = int16(obj.JavaMessage.getSideBrushCurrent);
        end
        
        function set.SideBrushCurrent(obj, sidebrushcurrent)
            %set.SideBrushCurrent Set the value for property SideBrushCurrent
            validateattributes(sidebrushcurrent, {'numeric'}, {'nonempty', 'scalar'}, 'Diagnostic', 'sidebrushcurrent');
            
            obj.JavaMessage.setSideBrushCurrent(sidebrushcurrent);
        end
        
        function leftmotorovercurrent = get.LeftMotorOvercurrent(obj)
            %get.LeftMotorOvercurrent Get the value for property LeftMotorOvercurrent
            leftmotorovercurrent = logical(obj.JavaMessage.getLeftMotorOvercurrent);
        end
        
        function set.LeftMotorOvercurrent(obj, leftmotorovercurrent)
            %set.LeftMotorOvercurrent Set the value for property LeftMotorOvercurrent
            validateattributes(leftmotorovercurrent, {'logical', 'numeric'}, {'nonempty', 'scalar'}, 'Diagnostic', 'leftmotorovercurrent');
            
            obj.JavaMessage.setLeftMotorOvercurrent(leftmotorovercurrent);
        end
        
        function rightmotorovercurrent = get.RightMotorOvercurrent(obj)
            %get.RightMotorOvercurrent Get the value for property RightMotorOvercurrent
            rightmotorovercurrent = logical(obj.JavaMessage.getRightMotorOvercurrent);
        end
        
        function set.RightMotorOvercurrent(obj, rightmotorovercurrent)
            %set.RightMotorOvercurrent Set the value for property RightMotorOvercurrent
            validateattributes(rightmotorovercurrent, {'logical', 'numeric'}, {'nonempty', 'scalar'}, 'Diagnostic', 'rightmotorovercurrent');
            
            obj.JavaMessage.setRightMotorOvercurrent(rightmotorovercurrent);
        end
        
        function mainbrushovercurrent = get.MainBrushOvercurrent(obj)
            %get.MainBrushOvercurrent Get the value for property MainBrushOvercurrent
            mainbrushovercurrent = logical(obj.JavaMessage.getMainBrushOvercurrent);
        end
        
        function set.MainBrushOvercurrent(obj, mainbrushovercurrent)
            %set.MainBrushOvercurrent Set the value for property MainBrushOvercurrent
            validateattributes(mainbrushovercurrent, {'logical', 'numeric'}, {'nonempty', 'scalar'}, 'Diagnostic', 'mainbrushovercurrent');
            
            obj.JavaMessage.setMainBrushOvercurrent(mainbrushovercurrent);
        end
        
        function sidebrushovercurrent = get.SideBrushOvercurrent(obj)
            %get.SideBrushOvercurrent Get the value for property SideBrushOvercurrent
            sidebrushovercurrent = logical(obj.JavaMessage.getSideBrushOvercurrent);
        end
        
        function set.SideBrushOvercurrent(obj, sidebrushovercurrent)
            %set.SideBrushOvercurrent Set the value for property SideBrushOvercurrent
            validateattributes(sidebrushovercurrent, {'logical', 'numeric'}, {'nonempty', 'scalar'}, 'Diagnostic', 'sidebrushovercurrent');
            
            obj.JavaMessage.setSideBrushOvercurrent(sidebrushovercurrent);
        end
        
        function batterycurrent = get.BatteryCurrent(obj)
            %get.BatteryCurrent Get the value for property BatteryCurrent
            batterycurrent = int16(obj.JavaMessage.getBatteryCurrent);
        end
        
        function set.BatteryCurrent(obj, batterycurrent)
            %set.BatteryCurrent Set the value for property BatteryCurrent
            validateattributes(batterycurrent, {'numeric'}, {'nonempty', 'scalar'}, 'Diagnostic', 'batterycurrent');
            
            obj.JavaMessage.setBatteryCurrent(batterycurrent);
        end
        
        function batteryvoltage = get.BatteryVoltage(obj)
            %get.BatteryVoltage Get the value for property BatteryVoltage
            batteryvoltage = int16(obj.JavaMessage.getBatteryVoltage);
        end
        
        function set.BatteryVoltage(obj, batteryvoltage)
            %set.BatteryVoltage Set the value for property BatteryVoltage
            validateattributes(batteryvoltage, {'numeric'}, {'nonempty', 'scalar'}, 'Diagnostic', 'batteryvoltage');
            
            obj.JavaMessage.setBatteryVoltage(batteryvoltage);
        end
        
        function batterytemperature = get.BatteryTemperature(obj)
            %get.BatteryTemperature Get the value for property BatteryTemperature
            batterytemperature = int8(obj.JavaMessage.getBatteryTemperature);
        end
        
        function set.BatteryTemperature(obj, batterytemperature)
            %set.BatteryTemperature Set the value for property BatteryTemperature
            validateattributes(batterytemperature, {'numeric'}, {'nonempty', 'scalar'}, 'Diagnostic', 'batterytemperature');
            
            obj.JavaMessage.setBatteryTemperature(batterytemperature);
        end
    end
    
    methods (Access = protected)
        function resetCache(obj)
            %resetCache Resets any cached properties
            obj.Cache.Header = [];
        end
        
        function cpObj = copyElement(obj)
            %copyElement Implements deep copy behavior for message
            
            % Call default copy method for shallow copy
            cpObj = copyElement@robotics.ros.Message(obj);
            
            % Clear any existing cached properties
            cpObj.resetCache;
            
            % Create a new Java message object
            cpObj.JavaMessage = obj.createNewJavaMessage;
            
            % Iterate over all primitive properties
            cpObj.LeftMotorCurrent = obj.LeftMotorCurrent;
            cpObj.RightMotorCurrent = obj.RightMotorCurrent;
            cpObj.MainBrushCurrent = obj.MainBrushCurrent;
            cpObj.SideBrushCurrent = obj.SideBrushCurrent;
            cpObj.LeftMotorOvercurrent = obj.LeftMotorOvercurrent;
            cpObj.RightMotorOvercurrent = obj.RightMotorOvercurrent;
            cpObj.MainBrushOvercurrent = obj.MainBrushOvercurrent;
            cpObj.SideBrushOvercurrent = obj.SideBrushOvercurrent;
            cpObj.BatteryCurrent = obj.BatteryCurrent;
            cpObj.BatteryVoltage = obj.BatteryVoltage;
            cpObj.BatteryTemperature = obj.BatteryTemperature;
            
            % Recursively copy compound properties
            cpObj.Header = copy(obj.Header);
        end
        
        function reload(obj, strObj)
            %reload Called by loadobj to assign properties
            obj.LeftMotorCurrent = strObj.LeftMotorCurrent;
            obj.RightMotorCurrent = strObj.RightMotorCurrent;
            obj.MainBrushCurrent = strObj.MainBrushCurrent;
            obj.SideBrushCurrent = strObj.SideBrushCurrent;
            obj.LeftMotorOvercurrent = strObj.LeftMotorOvercurrent;
            obj.RightMotorOvercurrent = strObj.RightMotorOvercurrent;
            obj.MainBrushOvercurrent = strObj.MainBrushOvercurrent;
            obj.SideBrushOvercurrent = strObj.SideBrushOvercurrent;
            obj.BatteryCurrent = strObj.BatteryCurrent;
            obj.BatteryVoltage = strObj.BatteryVoltage;
            obj.BatteryTemperature = strObj.BatteryTemperature;
            obj.Header = feval([obj.StdMsgsHeaderClass '.loadobj'], strObj.Header);
        end
    end
    
    methods (Access = ?robotics.ros.Message)
        function strObj = saveobj(obj)
            %saveobj Implements saving of message to MAT file
            
            % Return an empty element if object array is empty
            if isempty(obj)
                strObj = struct.empty;
                return
            end
            
            strObj.LeftMotorCurrent = obj.LeftMotorCurrent;
            strObj.RightMotorCurrent = obj.RightMotorCurrent;
            strObj.MainBrushCurrent = obj.MainBrushCurrent;
            strObj.SideBrushCurrent = obj.SideBrushCurrent;
            strObj.LeftMotorOvercurrent = obj.LeftMotorOvercurrent;
            strObj.RightMotorOvercurrent = obj.RightMotorOvercurrent;
            strObj.MainBrushOvercurrent = obj.MainBrushOvercurrent;
            strObj.SideBrushOvercurrent = obj.SideBrushOvercurrent;
            strObj.BatteryCurrent = obj.BatteryCurrent;
            strObj.BatteryVoltage = obj.BatteryVoltage;
            strObj.BatteryTemperature = obj.BatteryTemperature;
            strObj.Header = saveobj(obj.Header);
        end
    end
    
    methods (Static, Access = {?matlab.unittest.TestCase, ?robotics.ros.Message})
        function obj = loadobj(strObj)
            %loadobj Implements loading of message from MAT file
            
            % Return an empty object array if the structure element is not defined
            if isempty(strObj)
                obj = robotics.ros.custom.msggen.irobotcreate2.Diagnostic.empty(0,1);
                return
            end
            
            % Create an empty message object
            obj = robotics.ros.custom.msggen.irobotcreate2.Diagnostic;
            obj.reload(strObj);
        end
    end
end
