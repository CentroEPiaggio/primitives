classdef Leds < robotics.ros.Message
    %Leds MATLAB implementation of irobotcreate2/Leds
    %   This class was automatically generated by
    %   robotics.ros.msg.internal.gen.MessageClassGenerator.
    
    %   Copyright 2016 The MathWorks, Inc.
    
    %#ok<*INUSD>
    
    properties (Constant)
        MessageType = 'irobotcreate2/Leds' % The ROS message type
    end
    
    properties (Constant, Hidden)
        MD5Checksum = 'd69ee7dfd55b5e80fe8d68fdc28e3612' % The MD5 Checksum of the message definition
    end
    
    properties (Access = protected)
        JavaMessage % The Java message object
    end
    
    properties (Constant, Access = protected)
        StdMsgsHeaderClass = robotics.ros.msg.internal.MessageFactory.getClassForType('std_msgs/Header') % Dispatch to MATLAB class for message type std_msgs/Header
    end
    
    properties (Dependent)
        Header
        Warning
        Dock
        Spot
        DirtDetect
        CleanColor
        CleanIntensity
    end
    
    properties (Access = protected)
        Cache = struct('Header', []) % The cache for fast data access
    end
    
    properties (Constant, Hidden)
        PropertyList = {'CleanColor', 'CleanIntensity', 'DirtDetect', 'Dock', 'Header', 'Spot', 'Warning'} % List of non-constant message properties
        ROSPropertyList = {'clean_color', 'clean_intensity', 'dirt_detect', 'dock', 'header', 'spot', 'warning'} % List of non-constant ROS message properties
    end
    
    methods
        function obj = Leds(msg)
            %Leds Construct the message object Leds
            import com.mathworks.toolbox.robotics.ros.message.MessageInfo;
            
            % Support default constructor
            if nargin == 0
                obj.JavaMessage = obj.createNewJavaMessage;
                return;
            end
            
            % Construct appropriate empty array
            if isempty(msg)
                obj = obj.empty(0,1);
                return;
            end
            
            % Make scalar construction fast
            if isscalar(msg)
                % Check for correct input class
                if ~MessageInfo.compareTypes(msg(1), obj.MessageType)
                    error(message('robotics:ros:message:NoTypeMatch', obj.MessageType, ...
                        char(MessageInfo.getType(msg(1))) ));
                end
                obj.JavaMessage = msg(1);
                return;
            end
            
            % Check that this is a vector of scalar messages. Since this
            % is an object array, use arrayfun to verify.
            if ~all(arrayfun(@isscalar, msg))
                error(message('robotics:ros:message:MessageArraySizeError'));
            end
            
            % Check that all messages in the array have the correct type
            if ~all(arrayfun(@(x) MessageInfo.compareTypes(x, obj.MessageType), msg))
                error(message('robotics:ros:message:NoTypeMatchArray', obj.MessageType));
            end
            
            % Construct array of objects if necessary
            objType = class(obj);
            for i = 1:length(msg)
                obj(i,1) = feval(objType, msg(i)); %#ok<AGROW>
            end
        end
        
        function header = get.Header(obj)
            %get.Header Get the value for property Header
            if isempty(obj.Cache.Header)
                obj.Cache.Header = feval(obj.StdMsgsHeaderClass, obj.JavaMessage.getHeader);
            end
            header = obj.Cache.Header;
        end
        
        function set.Header(obj, header)
            %set.Header Set the value for property Header
            validateattributes(header, {obj.StdMsgsHeaderClass}, {'nonempty', 'scalar'}, 'Leds', 'header');
            
            obj.JavaMessage.setHeader(header.getJavaObject);
            
            % Update cache if necessary
            if ~isempty(obj.Cache.Header)
                obj.Cache.Header.setJavaObject(header.getJavaObject);
            end
        end
        
        function warning = get.Warning(obj)
            %get.Warning Get the value for property Warning
            warning = logical(obj.JavaMessage.getWarning);
        end
        
        function set.Warning(obj, warning)
            %set.Warning Set the value for property Warning
            validateattributes(warning, {'logical', 'numeric'}, {'nonempty', 'scalar'}, 'Leds', 'warning');
            
            obj.JavaMessage.setWarning(warning);
        end
        
        function dock = get.Dock(obj)
            %get.Dock Get the value for property Dock
            dock = logical(obj.JavaMessage.getDock);
        end
        
        function set.Dock(obj, dock)
            %set.Dock Set the value for property Dock
            validateattributes(dock, {'logical', 'numeric'}, {'nonempty', 'scalar'}, 'Leds', 'dock');
            
            obj.JavaMessage.setDock(dock);
        end
        
        function spot = get.Spot(obj)
            %get.Spot Get the value for property Spot
            spot = logical(obj.JavaMessage.getSpot);
        end
        
        function set.Spot(obj, spot)
            %set.Spot Set the value for property Spot
            validateattributes(spot, {'logical', 'numeric'}, {'nonempty', 'scalar'}, 'Leds', 'spot');
            
            obj.JavaMessage.setSpot(spot);
        end
        
        function dirtdetect = get.DirtDetect(obj)
            %get.DirtDetect Get the value for property DirtDetect
            dirtdetect = logical(obj.JavaMessage.getDirtDetect);
        end
        
        function set.DirtDetect(obj, dirtdetect)
            %set.DirtDetect Set the value for property DirtDetect
            validateattributes(dirtdetect, {'logical', 'numeric'}, {'nonempty', 'scalar'}, 'Leds', 'dirtdetect');
            
            obj.JavaMessage.setDirtDetect(dirtdetect);
        end
        
        function cleancolor = get.CleanColor(obj)
            %get.CleanColor Get the value for property CleanColor
            cleancolor = typecast(int8(obj.JavaMessage.getCleanColor), 'uint8');
        end
        
        function set.CleanColor(obj, cleancolor)
            %set.CleanColor Set the value for property CleanColor
            validateattributes(cleancolor, {'numeric'}, {'nonempty', 'scalar'}, 'Leds', 'cleancolor');
            
            obj.JavaMessage.setCleanColor(cleancolor);
        end
        
        function cleanintensity = get.CleanIntensity(obj)
            %get.CleanIntensity Get the value for property CleanIntensity
            cleanintensity = typecast(int8(obj.JavaMessage.getCleanIntensity), 'uint8');
        end
        
        function set.CleanIntensity(obj, cleanintensity)
            %set.CleanIntensity Set the value for property CleanIntensity
            validateattributes(cleanintensity, {'numeric'}, {'nonempty', 'scalar'}, 'Leds', 'cleanintensity');
            
            obj.JavaMessage.setCleanIntensity(cleanintensity);
        end
    end
    
    methods (Access = protected)
        function resetCache(obj)
            %resetCache Resets any cached properties
            obj.Cache.Header = [];
        end
        
        function cpObj = copyElement(obj)
            %copyElement Implements deep copy behavior for message
            
            % Call default copy method for shallow copy
            cpObj = copyElement@robotics.ros.Message(obj);
            
            % Clear any existing cached properties
            cpObj.resetCache;
            
            % Create a new Java message object
            cpObj.JavaMessage = obj.createNewJavaMessage;
            
            % Iterate over all primitive properties
            cpObj.Warning = obj.Warning;
            cpObj.Dock = obj.Dock;
            cpObj.Spot = obj.Spot;
            cpObj.DirtDetect = obj.DirtDetect;
            cpObj.CleanColor = obj.CleanColor;
            cpObj.CleanIntensity = obj.CleanIntensity;
            
            % Recursively copy compound properties
            cpObj.Header = copy(obj.Header);
        end
        
        function reload(obj, strObj)
            %reload Called by loadobj to assign properties
            obj.Warning = strObj.Warning;
            obj.Dock = strObj.Dock;
            obj.Spot = strObj.Spot;
            obj.DirtDetect = strObj.DirtDetect;
            obj.CleanColor = strObj.CleanColor;
            obj.CleanIntensity = strObj.CleanIntensity;
            obj.Header = feval([obj.StdMsgsHeaderClass '.loadobj'], strObj.Header);
        end
    end
    
    methods (Access = ?robotics.ros.Message)
        function strObj = saveobj(obj)
            %saveobj Implements saving of message to MAT file
            
            % Return an empty element if object array is empty
            if isempty(obj)
                strObj = struct.empty;
                return
            end
            
            strObj.Warning = obj.Warning;
            strObj.Dock = obj.Dock;
            strObj.Spot = obj.Spot;
            strObj.DirtDetect = obj.DirtDetect;
            strObj.CleanColor = obj.CleanColor;
            strObj.CleanIntensity = obj.CleanIntensity;
            strObj.Header = saveobj(obj.Header);
        end
    end
    
    methods (Static, Access = {?matlab.unittest.TestCase, ?robotics.ros.Message})
        function obj = loadobj(strObj)
            %loadobj Implements loading of message from MAT file
            
            % Return an empty object array if the structure element is not defined
            if isempty(strObj)
                obj = robotics.ros.custom.msggen.irobotcreate2.Leds.empty(0,1);
                return
            end
            
            % Create an empty message object
            obj = robotics.ros.custom.msggen.irobotcreate2.Leds;
            obj.reload(strObj);
        end
    end
end
