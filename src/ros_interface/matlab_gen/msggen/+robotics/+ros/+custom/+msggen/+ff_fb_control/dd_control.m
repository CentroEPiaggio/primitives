classdef dd_control < robotics.ros.Message
    %dd_control MATLAB implementation of ff_fb_control/dd_control
    %   This class was automatically generated by
    %   robotics.ros.msg.internal.gen.MessageClassGenerator.
    
    %   Copyright 2016 The MathWorks, Inc.
    
    %#ok<*INUSD>
    
    properties (Constant)
        MessageType = 'ff_fb_control/dd_control' % The ROS message type
    end
    
    properties (Constant, Hidden)
        MD5Checksum = '1462379272899fc7595014219ca956fc' % The MD5 Checksum of the message definition
    end
    
    properties (Access = protected)
        JavaMessage % The Java message object
    end
    
    properties (Constant, Access = protected)
        StdMsgsHeaderClass = robotics.ros.msg.internal.MessageFactory.getClassForType('std_msgs/Header') % Dispatch to MATLAB class for message type std_msgs/Header
    end
    
    properties (Dependent)
        Header
        DesiredX
        DesiredY
        DesiredTheta
        DesiredLinearVelocity
        DesiredAngularVelocity
    end
    
    properties (Access = protected)
        Cache = struct('Header', []) % The cache for fast data access
    end
    
    properties (Constant, Hidden)
        PropertyList = {'DesiredAngularVelocity', 'DesiredLinearVelocity', 'DesiredTheta', 'DesiredX', 'DesiredY', 'Header'} % List of non-constant message properties
        ROSPropertyList = {'desired_angular_velocity', 'desired_linear_velocity', 'desired_theta', 'desired_x', 'desired_y', 'header'} % List of non-constant ROS message properties
    end
    
    methods
        function obj = dd_control(msg)
            %dd_control Construct the message object dd_control
            import com.mathworks.toolbox.robotics.ros.message.MessageInfo;
            
            % Support default constructor
            if nargin == 0
                obj.JavaMessage = obj.createNewJavaMessage;
                return;
            end
            
            % Construct appropriate empty array
            if isempty(msg)
                obj = obj.empty(0,1);
                return;
            end
            
            % Make scalar construction fast
            if isscalar(msg)
                % Check for correct input class
                if ~MessageInfo.compareTypes(msg(1), obj.MessageType)
                    error(message('robotics:ros:message:NoTypeMatch', obj.MessageType, ...
                        char(MessageInfo.getType(msg(1))) ));
                end
                obj.JavaMessage = msg(1);
                return;
            end
            
            % Check that this is a vector of scalar messages. Since this
            % is an object array, use arrayfun to verify.
            if ~all(arrayfun(@isscalar, msg))
                error(message('robotics:ros:message:MessageArraySizeError'));
            end
            
            % Check that all messages in the array have the correct type
            if ~all(arrayfun(@(x) MessageInfo.compareTypes(x, obj.MessageType), msg))
                error(message('robotics:ros:message:NoTypeMatchArray', obj.MessageType));
            end
            
            % Construct array of objects if necessary
            objType = class(obj);
            for i = 1:length(msg)
                obj(i,1) = feval(objType, msg(i)); %#ok<AGROW>
            end
        end
        
        function header = get.Header(obj)
            %get.Header Get the value for property Header
            if isempty(obj.Cache.Header)
                obj.Cache.Header = feval(obj.StdMsgsHeaderClass, obj.JavaMessage.getHeader);
            end
            header = obj.Cache.Header;
        end
        
        function set.Header(obj, header)
            %set.Header Set the value for property Header
            validateattributes(header, {obj.StdMsgsHeaderClass}, {'nonempty', 'scalar'}, 'dd_control', 'header');
            
            obj.JavaMessage.setHeader(header.getJavaObject);
            
            % Update cache if necessary
            if ~isempty(obj.Cache.Header)
                obj.Cache.Header.setJavaObject(header.getJavaObject);
            end
        end
        
        function desiredx = get.DesiredX(obj)
            %get.DesiredX Get the value for property DesiredX
            desiredx = double(obj.JavaMessage.getDesiredX);
        end
        
        function set.DesiredX(obj, desiredx)
            %set.DesiredX Set the value for property DesiredX
            validateattributes(desiredx, {'numeric'}, {'nonempty', 'scalar'}, 'dd_control', 'desiredx');
            
            obj.JavaMessage.setDesiredX(desiredx);
        end
        
        function desiredy = get.DesiredY(obj)
            %get.DesiredY Get the value for property DesiredY
            desiredy = double(obj.JavaMessage.getDesiredY);
        end
        
        function set.DesiredY(obj, desiredy)
            %set.DesiredY Set the value for property DesiredY
            validateattributes(desiredy, {'numeric'}, {'nonempty', 'scalar'}, 'dd_control', 'desiredy');
            
            obj.JavaMessage.setDesiredY(desiredy);
        end
        
        function desiredtheta = get.DesiredTheta(obj)
            %get.DesiredTheta Get the value for property DesiredTheta
            desiredtheta = double(obj.JavaMessage.getDesiredTheta);
        end
        
        function set.DesiredTheta(obj, desiredtheta)
            %set.DesiredTheta Set the value for property DesiredTheta
            validateattributes(desiredtheta, {'numeric'}, {'nonempty', 'scalar'}, 'dd_control', 'desiredtheta');
            
            obj.JavaMessage.setDesiredTheta(desiredtheta);
        end
        
        function desiredlinearvelocity = get.DesiredLinearVelocity(obj)
            %get.DesiredLinearVelocity Get the value for property DesiredLinearVelocity
            desiredlinearvelocity = double(obj.JavaMessage.getDesiredLinearVelocity);
        end
        
        function set.DesiredLinearVelocity(obj, desiredlinearvelocity)
            %set.DesiredLinearVelocity Set the value for property DesiredLinearVelocity
            validateattributes(desiredlinearvelocity, {'numeric'}, {'nonempty', 'scalar'}, 'dd_control', 'desiredlinearvelocity');
            
            obj.JavaMessage.setDesiredLinearVelocity(desiredlinearvelocity);
        end
        
        function desiredangularvelocity = get.DesiredAngularVelocity(obj)
            %get.DesiredAngularVelocity Get the value for property DesiredAngularVelocity
            desiredangularvelocity = double(obj.JavaMessage.getDesiredAngularVelocity);
        end
        
        function set.DesiredAngularVelocity(obj, desiredangularvelocity)
            %set.DesiredAngularVelocity Set the value for property DesiredAngularVelocity
            validateattributes(desiredangularvelocity, {'numeric'}, {'nonempty', 'scalar'}, 'dd_control', 'desiredangularvelocity');
            
            obj.JavaMessage.setDesiredAngularVelocity(desiredangularvelocity);
        end
    end
    
    methods (Access = protected)
        function resetCache(obj)
            %resetCache Resets any cached properties
            obj.Cache.Header = [];
        end
        
        function cpObj = copyElement(obj)
            %copyElement Implements deep copy behavior for message
            
            % Call default copy method for shallow copy
            cpObj = copyElement@robotics.ros.Message(obj);
            
            % Clear any existing cached properties
            cpObj.resetCache;
            
            % Create a new Java message object
            cpObj.JavaMessage = obj.createNewJavaMessage;
            
            % Iterate over all primitive properties
            cpObj.DesiredX = obj.DesiredX;
            cpObj.DesiredY = obj.DesiredY;
            cpObj.DesiredTheta = obj.DesiredTheta;
            cpObj.DesiredLinearVelocity = obj.DesiredLinearVelocity;
            cpObj.DesiredAngularVelocity = obj.DesiredAngularVelocity;
            
            % Recursively copy compound properties
            cpObj.Header = copy(obj.Header);
        end
        
        function reload(obj, strObj)
            %reload Called by loadobj to assign properties
            obj.DesiredX = strObj.DesiredX;
            obj.DesiredY = strObj.DesiredY;
            obj.DesiredTheta = strObj.DesiredTheta;
            obj.DesiredLinearVelocity = strObj.DesiredLinearVelocity;
            obj.DesiredAngularVelocity = strObj.DesiredAngularVelocity;
            obj.Header = feval([obj.StdMsgsHeaderClass '.loadobj'], strObj.Header);
        end
    end
    
    methods (Access = ?robotics.ros.Message)
        function strObj = saveobj(obj)
            %saveobj Implements saving of message to MAT file
            
            % Return an empty element if object array is empty
            if isempty(obj)
                strObj = struct.empty;
                return
            end
            
            strObj.DesiredX = obj.DesiredX;
            strObj.DesiredY = obj.DesiredY;
            strObj.DesiredTheta = obj.DesiredTheta;
            strObj.DesiredLinearVelocity = obj.DesiredLinearVelocity;
            strObj.DesiredAngularVelocity = obj.DesiredAngularVelocity;
            strObj.Header = saveobj(obj.Header);
        end
    end
    
    methods (Static, Access = {?matlab.unittest.TestCase, ?robotics.ros.Message})
        function obj = loadobj(strObj)
            %loadobj Implements loading of message from MAT file
            
            % Return an empty object array if the structure element is not defined
            if isempty(strObj)
                obj = robotics.ros.custom.msggen.ff_fb_control.dd_control.empty(0,1);
                return
            end
            
            % Create an empty message object
            obj = robotics.ros.custom.msggen.ff_fb_control.dd_control;
            obj.reload(strObj);
        end
    end
end
