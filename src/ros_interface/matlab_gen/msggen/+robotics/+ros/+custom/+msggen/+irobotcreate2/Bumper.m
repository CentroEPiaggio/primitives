classdef Bumper < robotics.ros.Message
    %Bumper MATLAB implementation of irobotcreate2/Bumper
    %   This class was automatically generated by
    %   robotics.ros.msg.internal.gen.MessageClassGenerator.
    
    %   Copyright 2016 The MathWorks, Inc.
    
    %#ok<*INUSD>
    
    properties (Constant)
        MessageType = 'irobotcreate2/Bumper' % The ROS message type
    end
    
    properties (Constant, Hidden)
        MD5Checksum = '0ce131cedcae0c89b4efbe13237e4425' % The MD5 Checksum of the message definition
    end
    
    properties (Access = protected)
        JavaMessage % The Java message object
    end
    
    properties (Constant, Access = protected)
        Irobotcreate2RoombaSwitchClass = robotics.ros.msg.internal.MessageFactory.getClassForType('irobotcreate2/RoombaSwitch') % Dispatch to MATLAB class for message type irobotcreate2/RoombaSwitch
    end
    
    properties (Dependent)
        Left
        Right
    end
    
    properties (Access = protected)
        Cache = struct('Left', [], 'Right', []) % The cache for fast data access
    end
    
    properties (Constant, Hidden)
        PropertyList = {'Left', 'Right'} % List of non-constant message properties
        ROSPropertyList = {'left', 'right'} % List of non-constant ROS message properties
    end
    
    methods
        function obj = Bumper(msg)
            %Bumper Construct the message object Bumper
            import com.mathworks.toolbox.robotics.ros.message.MessageInfo;
            
            % Support default constructor
            if nargin == 0
                obj.JavaMessage = obj.createNewJavaMessage;
                return;
            end
            
            % Construct appropriate empty array
            if isempty(msg)
                obj = obj.empty(0,1);
                return;
            end
            
            % Make scalar construction fast
            if isscalar(msg)
                % Check for correct input class
                if ~MessageInfo.compareTypes(msg(1), obj.MessageType)
                    error(message('robotics:ros:message:NoTypeMatch', obj.MessageType, ...
                        char(MessageInfo.getType(msg(1))) ));
                end
                obj.JavaMessage = msg(1);
                return;
            end
            
            % Check that this is a vector of scalar messages. Since this
            % is an object array, use arrayfun to verify.
            if ~all(arrayfun(@isscalar, msg))
                error(message('robotics:ros:message:MessageArraySizeError'));
            end
            
            % Check that all messages in the array have the correct type
            if ~all(arrayfun(@(x) MessageInfo.compareTypes(x, obj.MessageType), msg))
                error(message('robotics:ros:message:NoTypeMatchArray', obj.MessageType));
            end
            
            % Construct array of objects if necessary
            objType = class(obj);
            for i = 1:length(msg)
                obj(i,1) = feval(objType, msg(i)); %#ok<AGROW>
            end
        end
        
        function left = get.Left(obj)
            %get.Left Get the value for property Left
            if isempty(obj.Cache.Left)
                obj.Cache.Left = feval(obj.Irobotcreate2RoombaSwitchClass, obj.JavaMessage.getLeft);
            end
            left = obj.Cache.Left;
        end
        
        function set.Left(obj, left)
            %set.Left Set the value for property Left
            validateattributes(left, {obj.Irobotcreate2RoombaSwitchClass}, {'nonempty', 'scalar'}, 'Bumper', 'left');
            
            obj.JavaMessage.setLeft(left.getJavaObject);
            
            % Update cache if necessary
            if ~isempty(obj.Cache.Left)
                obj.Cache.Left.setJavaObject(left.getJavaObject);
            end
        end
        
        function right = get.Right(obj)
            %get.Right Get the value for property Right
            if isempty(obj.Cache.Right)
                obj.Cache.Right = feval(obj.Irobotcreate2RoombaSwitchClass, obj.JavaMessage.getRight);
            end
            right = obj.Cache.Right;
        end
        
        function set.Right(obj, right)
            %set.Right Set the value for property Right
            validateattributes(right, {obj.Irobotcreate2RoombaSwitchClass}, {'nonempty', 'scalar'}, 'Bumper', 'right');
            
            obj.JavaMessage.setRight(right.getJavaObject);
            
            % Update cache if necessary
            if ~isempty(obj.Cache.Right)
                obj.Cache.Right.setJavaObject(right.getJavaObject);
            end
        end
    end
    
    methods (Access = protected)
        function resetCache(obj)
            %resetCache Resets any cached properties
            obj.Cache.Left = [];
            obj.Cache.Right = [];
        end
        
        function cpObj = copyElement(obj)
            %copyElement Implements deep copy behavior for message
            
            % Call default copy method for shallow copy
            cpObj = copyElement@robotics.ros.Message(obj);
            
            % Clear any existing cached properties
            cpObj.resetCache;
            
            % Create a new Java message object
            cpObj.JavaMessage = obj.createNewJavaMessage;
            
            % Recursively copy compound properties
            cpObj.Left = copy(obj.Left);
            cpObj.Right = copy(obj.Right);
        end
        
        function reload(obj, strObj)
            %reload Called by loadobj to assign properties
            obj.Left = feval([obj.Irobotcreate2RoombaSwitchClass '.loadobj'], strObj.Left);
            obj.Right = feval([obj.Irobotcreate2RoombaSwitchClass '.loadobj'], strObj.Right);
        end
    end
    
    methods (Access = ?robotics.ros.Message)
        function strObj = saveobj(obj)
            %saveobj Implements saving of message to MAT file
            
            % Return an empty element if object array is empty
            if isempty(obj)
                strObj = struct.empty;
                return
            end
            
            strObj.Left = saveobj(obj.Left);
            strObj.Right = saveobj(obj.Right);
        end
    end
    
    methods (Static, Access = {?matlab.unittest.TestCase, ?robotics.ros.Message})
        function obj = loadobj(strObj)
            %loadobj Implements loading of message from MAT file
            
            % Return an empty object array if the structure element is not defined
            if isempty(strObj)
                obj = robotics.ros.custom.msggen.irobotcreate2.Bumper.empty(0,1);
                return
            end
            
            % Create an empty message object
            obj = robotics.ros.custom.msggen.irobotcreate2.Bumper;
            obj.reload(strObj);
        end
    end
end
