classdef Brushes < robotics.ros.Message
    %Brushes MATLAB implementation of irobotcreate2/Brushes
    %   This class was automatically generated by
    %   robotics.ros.msg.internal.gen.MessageClassGenerator.
    
    %   Copyright 2016 The MathWorks, Inc.
    
    %#ok<*INUSD>
    
    properties (Constant)
        MessageType = 'irobotcreate2/Brushes' % The ROS message type
    end
    
    properties (Constant, Hidden)
        MD5Checksum = 'd4c497f02ce3244991df05e0d729013c' % The MD5 Checksum of the message definition
    end
    
    properties (Access = protected)
        JavaMessage % The Java message object
    end
    
    properties (Constant, Access = protected)
        StdMsgsHeaderClass = robotics.ros.msg.internal.MessageFactory.getClassForType('std_msgs/Header') % Dispatch to MATLAB class for message type std_msgs/Header
    end
    
    properties (Dependent)
        Header
        MainBrush
        MainBrushPwm
        MainBrushDirection
        SideBrush
        SideBrushPwm
        SideBrushClockwise
        Vacuum
        VacuumPwm
    end
    
    properties (Access = protected)
        Cache = struct('Header', []) % The cache for fast data access
    end
    
    properties (Constant, Hidden)
        PropertyList = {'Header', 'MainBrush', 'MainBrushDirection', 'MainBrushPwm', 'SideBrush', 'SideBrushClockwise', 'SideBrushPwm', 'Vacuum', 'VacuumPwm'} % List of non-constant message properties
        ROSPropertyList = {'header', 'main_brush', 'main_brush_direction', 'main_brush_pwm', 'side_brush', 'side_brush_clockwise', 'side_brush_pwm', 'vacuum', 'vacuum_pwm'} % List of non-constant ROS message properties
    end
    
    methods
        function obj = Brushes(msg)
            %Brushes Construct the message object Brushes
            import com.mathworks.toolbox.robotics.ros.message.MessageInfo;
            
            % Support default constructor
            if nargin == 0
                obj.JavaMessage = obj.createNewJavaMessage;
                return;
            end
            
            % Construct appropriate empty array
            if isempty(msg)
                obj = obj.empty(0,1);
                return;
            end
            
            % Make scalar construction fast
            if isscalar(msg)
                % Check for correct input class
                if ~MessageInfo.compareTypes(msg(1), obj.MessageType)
                    error(message('robotics:ros:message:NoTypeMatch', obj.MessageType, ...
                        char(MessageInfo.getType(msg(1))) ));
                end
                obj.JavaMessage = msg(1);
                return;
            end
            
            % Check that this is a vector of scalar messages. Since this
            % is an object array, use arrayfun to verify.
            if ~all(arrayfun(@isscalar, msg))
                error(message('robotics:ros:message:MessageArraySizeError'));
            end
            
            % Check that all messages in the array have the correct type
            if ~all(arrayfun(@(x) MessageInfo.compareTypes(x, obj.MessageType), msg))
                error(message('robotics:ros:message:NoTypeMatchArray', obj.MessageType));
            end
            
            % Construct array of objects if necessary
            objType = class(obj);
            for i = 1:length(msg)
                obj(i,1) = feval(objType, msg(i)); %#ok<AGROW>
            end
        end
        
        function header = get.Header(obj)
            %get.Header Get the value for property Header
            if isempty(obj.Cache.Header)
                obj.Cache.Header = feval(obj.StdMsgsHeaderClass, obj.JavaMessage.getHeader);
            end
            header = obj.Cache.Header;
        end
        
        function set.Header(obj, header)
            %set.Header Set the value for property Header
            validateattributes(header, {obj.StdMsgsHeaderClass}, {'nonempty', 'scalar'}, 'Brushes', 'header');
            
            obj.JavaMessage.setHeader(header.getJavaObject);
            
            % Update cache if necessary
            if ~isempty(obj.Cache.Header)
                obj.Cache.Header.setJavaObject(header.getJavaObject);
            end
        end
        
        function mainbrush = get.MainBrush(obj)
            %get.MainBrush Get the value for property MainBrush
            mainbrush = logical(obj.JavaMessage.getMainBrush);
        end
        
        function set.MainBrush(obj, mainbrush)
            %set.MainBrush Set the value for property MainBrush
            validateattributes(mainbrush, {'logical', 'numeric'}, {'nonempty', 'scalar'}, 'Brushes', 'mainbrush');
            
            obj.JavaMessage.setMainBrush(mainbrush);
        end
        
        function mainbrushpwm = get.MainBrushPwm(obj)
            %get.MainBrushPwm Get the value for property MainBrushPwm
            mainbrushpwm = int8(obj.JavaMessage.getMainBrushPwm);
        end
        
        function set.MainBrushPwm(obj, mainbrushpwm)
            %set.MainBrushPwm Set the value for property MainBrushPwm
            validateattributes(mainbrushpwm, {'numeric'}, {'nonempty', 'scalar'}, 'Brushes', 'mainbrushpwm');
            
            obj.JavaMessage.setMainBrushPwm(mainbrushpwm);
        end
        
        function mainbrushdirection = get.MainBrushDirection(obj)
            %get.MainBrushDirection Get the value for property MainBrushDirection
            mainbrushdirection = logical(obj.JavaMessage.getMainBrushDirection);
        end
        
        function set.MainBrushDirection(obj, mainbrushdirection)
            %set.MainBrushDirection Set the value for property MainBrushDirection
            validateattributes(mainbrushdirection, {'logical', 'numeric'}, {'nonempty', 'scalar'}, 'Brushes', 'mainbrushdirection');
            
            obj.JavaMessage.setMainBrushDirection(mainbrushdirection);
        end
        
        function sidebrush = get.SideBrush(obj)
            %get.SideBrush Get the value for property SideBrush
            sidebrush = logical(obj.JavaMessage.getSideBrush);
        end
        
        function set.SideBrush(obj, sidebrush)
            %set.SideBrush Set the value for property SideBrush
            validateattributes(sidebrush, {'logical', 'numeric'}, {'nonempty', 'scalar'}, 'Brushes', 'sidebrush');
            
            obj.JavaMessage.setSideBrush(sidebrush);
        end
        
        function sidebrushpwm = get.SideBrushPwm(obj)
            %get.SideBrushPwm Get the value for property SideBrushPwm
            sidebrushpwm = int8(obj.JavaMessage.getSideBrushPwm);
        end
        
        function set.SideBrushPwm(obj, sidebrushpwm)
            %set.SideBrushPwm Set the value for property SideBrushPwm
            validateattributes(sidebrushpwm, {'numeric'}, {'nonempty', 'scalar'}, 'Brushes', 'sidebrushpwm');
            
            obj.JavaMessage.setSideBrushPwm(sidebrushpwm);
        end
        
        function sidebrushclockwise = get.SideBrushClockwise(obj)
            %get.SideBrushClockwise Get the value for property SideBrushClockwise
            sidebrushclockwise = logical(obj.JavaMessage.getSideBrushClockwise);
        end
        
        function set.SideBrushClockwise(obj, sidebrushclockwise)
            %set.SideBrushClockwise Set the value for property SideBrushClockwise
            validateattributes(sidebrushclockwise, {'logical', 'numeric'}, {'nonempty', 'scalar'}, 'Brushes', 'sidebrushclockwise');
            
            obj.JavaMessage.setSideBrushClockwise(sidebrushclockwise);
        end
        
        function vacuum = get.Vacuum(obj)
            %get.Vacuum Get the value for property Vacuum
            vacuum = logical(obj.JavaMessage.getVacuum);
        end
        
        function set.Vacuum(obj, vacuum)
            %set.Vacuum Set the value for property Vacuum
            validateattributes(vacuum, {'logical', 'numeric'}, {'nonempty', 'scalar'}, 'Brushes', 'vacuum');
            
            obj.JavaMessage.setVacuum(vacuum);
        end
        
        function vacuumpwm = get.VacuumPwm(obj)
            %get.VacuumPwm Get the value for property VacuumPwm
            vacuumpwm = int8(obj.JavaMessage.getVacuumPwm);
        end
        
        function set.VacuumPwm(obj, vacuumpwm)
            %set.VacuumPwm Set the value for property VacuumPwm
            validateattributes(vacuumpwm, {'numeric'}, {'nonempty', 'scalar'}, 'Brushes', 'vacuumpwm');
            
            obj.JavaMessage.setVacuumPwm(vacuumpwm);
        end
    end
    
    methods (Access = protected)
        function resetCache(obj)
            %resetCache Resets any cached properties
            obj.Cache.Header = [];
        end
        
        function cpObj = copyElement(obj)
            %copyElement Implements deep copy behavior for message
            
            % Call default copy method for shallow copy
            cpObj = copyElement@robotics.ros.Message(obj);
            
            % Clear any existing cached properties
            cpObj.resetCache;
            
            % Create a new Java message object
            cpObj.JavaMessage = obj.createNewJavaMessage;
            
            % Iterate over all primitive properties
            cpObj.MainBrush = obj.MainBrush;
            cpObj.MainBrushPwm = obj.MainBrushPwm;
            cpObj.MainBrushDirection = obj.MainBrushDirection;
            cpObj.SideBrush = obj.SideBrush;
            cpObj.SideBrushPwm = obj.SideBrushPwm;
            cpObj.SideBrushClockwise = obj.SideBrushClockwise;
            cpObj.Vacuum = obj.Vacuum;
            cpObj.VacuumPwm = obj.VacuumPwm;
            
            % Recursively copy compound properties
            cpObj.Header = copy(obj.Header);
        end
        
        function reload(obj, strObj)
            %reload Called by loadobj to assign properties
            obj.MainBrush = strObj.MainBrush;
            obj.MainBrushPwm = strObj.MainBrushPwm;
            obj.MainBrushDirection = strObj.MainBrushDirection;
            obj.SideBrush = strObj.SideBrush;
            obj.SideBrushPwm = strObj.SideBrushPwm;
            obj.SideBrushClockwise = strObj.SideBrushClockwise;
            obj.Vacuum = strObj.Vacuum;
            obj.VacuumPwm = strObj.VacuumPwm;
            obj.Header = feval([obj.StdMsgsHeaderClass '.loadobj'], strObj.Header);
        end
    end
    
    methods (Access = ?robotics.ros.Message)
        function strObj = saveobj(obj)
            %saveobj Implements saving of message to MAT file
            
            % Return an empty element if object array is empty
            if isempty(obj)
                strObj = struct.empty;
                return
            end
            
            strObj.MainBrush = obj.MainBrush;
            strObj.MainBrushPwm = obj.MainBrushPwm;
            strObj.MainBrushDirection = obj.MainBrushDirection;
            strObj.SideBrush = obj.SideBrush;
            strObj.SideBrushPwm = obj.SideBrushPwm;
            strObj.SideBrushClockwise = obj.SideBrushClockwise;
            strObj.Vacuum = obj.Vacuum;
            strObj.VacuumPwm = obj.VacuumPwm;
            strObj.Header = saveobj(obj.Header);
        end
    end
    
    methods (Static, Access = {?matlab.unittest.TestCase, ?robotics.ros.Message})
        function obj = loadobj(strObj)
            %loadobj Implements loading of message from MAT file
            
            % Return an empty object array if the structure element is not defined
            if isempty(strObj)
                obj = robotics.ros.custom.msggen.irobotcreate2.Brushes.empty(0,1);
                return
            end
            
            % Create an empty message object
            obj = robotics.ros.custom.msggen.irobotcreate2.Brushes;
            obj.reload(strObj);
        end
    end
end
