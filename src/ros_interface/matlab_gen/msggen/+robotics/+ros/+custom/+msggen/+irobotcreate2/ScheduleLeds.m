classdef ScheduleLeds < robotics.ros.Message
    %ScheduleLeds MATLAB implementation of irobotcreate2/ScheduleLeds
    %   This class was automatically generated by
    %   robotics.ros.msg.internal.gen.MessageClassGenerator.
    
    %   Copyright 2016 The MathWorks, Inc.
    
    %#ok<*INUSD>
    
    properties (Constant)
        MessageType = 'irobotcreate2/ScheduleLeds' % The ROS message type
    end
    
    properties (Constant, Hidden)
        MD5Checksum = '4c552ea7c5b68737285d12a0dee0a839' % The MD5 Checksum of the message definition
    end
    
    properties (Access = protected)
        JavaMessage % The Java message object
    end
    
    properties (Constant, Access = protected)
        StdMsgsHeaderClass = robotics.ros.msg.internal.MessageFactory.getClassForType('std_msgs/Header') % Dispatch to MATLAB class for message type std_msgs/Header
    end
    
    properties (Dependent)
        Header
        Sunday
        Monday
        Tuesday
        Wednesday
        Thursday
        Friday
        Saturday
        Colon
        Pm
        Am
        Clock
        Schedule
    end
    
    properties (Access = protected)
        Cache = struct('Header', []) % The cache for fast data access
    end
    
    properties (Constant, Hidden)
        PropertyList = {'Am', 'Clock', 'Colon', 'Friday', 'Header', 'Monday', 'Pm', 'Saturday', 'Schedule', 'Sunday', 'Thursday', 'Tuesday', 'Wednesday'} % List of non-constant message properties
        ROSPropertyList = {'am', 'clock', 'colon', 'friday', 'header', 'monday', 'pm', 'saturday', 'schedule', 'sunday', 'thursday', 'tuesday', 'wednesday'} % List of non-constant ROS message properties
    end
    
    methods
        function obj = ScheduleLeds(msg)
            %ScheduleLeds Construct the message object ScheduleLeds
            import com.mathworks.toolbox.robotics.ros.message.MessageInfo;
            
            % Support default constructor
            if nargin == 0
                obj.JavaMessage = obj.createNewJavaMessage;
                return;
            end
            
            % Construct appropriate empty array
            if isempty(msg)
                obj = obj.empty(0,1);
                return;
            end
            
            % Make scalar construction fast
            if isscalar(msg)
                % Check for correct input class
                if ~MessageInfo.compareTypes(msg(1), obj.MessageType)
                    error(message('robotics:ros:message:NoTypeMatch', obj.MessageType, ...
                        char(MessageInfo.getType(msg(1))) ));
                end
                obj.JavaMessage = msg(1);
                return;
            end
            
            % Check that this is a vector of scalar messages. Since this
            % is an object array, use arrayfun to verify.
            if ~all(arrayfun(@isscalar, msg))
                error(message('robotics:ros:message:MessageArraySizeError'));
            end
            
            % Check that all messages in the array have the correct type
            if ~all(arrayfun(@(x) MessageInfo.compareTypes(x, obj.MessageType), msg))
                error(message('robotics:ros:message:NoTypeMatchArray', obj.MessageType));
            end
            
            % Construct array of objects if necessary
            objType = class(obj);
            for i = 1:length(msg)
                obj(i,1) = feval(objType, msg(i)); %#ok<AGROW>
            end
        end
        
        function header = get.Header(obj)
            %get.Header Get the value for property Header
            if isempty(obj.Cache.Header)
                obj.Cache.Header = feval(obj.StdMsgsHeaderClass, obj.JavaMessage.getHeader);
            end
            header = obj.Cache.Header;
        end
        
        function set.Header(obj, header)
            %set.Header Set the value for property Header
            validateattributes(header, {obj.StdMsgsHeaderClass}, {'nonempty', 'scalar'}, 'ScheduleLeds', 'header');
            
            obj.JavaMessage.setHeader(header.getJavaObject);
            
            % Update cache if necessary
            if ~isempty(obj.Cache.Header)
                obj.Cache.Header.setJavaObject(header.getJavaObject);
            end
        end
        
        function sunday = get.Sunday(obj)
            %get.Sunday Get the value for property Sunday
            sunday = logical(obj.JavaMessage.getSunday);
        end
        
        function set.Sunday(obj, sunday)
            %set.Sunday Set the value for property Sunday
            validateattributes(sunday, {'logical', 'numeric'}, {'nonempty', 'scalar'}, 'ScheduleLeds', 'sunday');
            
            obj.JavaMessage.setSunday(sunday);
        end
        
        function monday = get.Monday(obj)
            %get.Monday Get the value for property Monday
            monday = logical(obj.JavaMessage.getMonday);
        end
        
        function set.Monday(obj, monday)
            %set.Monday Set the value for property Monday
            validateattributes(monday, {'logical', 'numeric'}, {'nonempty', 'scalar'}, 'ScheduleLeds', 'monday');
            
            obj.JavaMessage.setMonday(monday);
        end
        
        function tuesday = get.Tuesday(obj)
            %get.Tuesday Get the value for property Tuesday
            tuesday = logical(obj.JavaMessage.getTuesday);
        end
        
        function set.Tuesday(obj, tuesday)
            %set.Tuesday Set the value for property Tuesday
            validateattributes(tuesday, {'logical', 'numeric'}, {'nonempty', 'scalar'}, 'ScheduleLeds', 'tuesday');
            
            obj.JavaMessage.setTuesday(tuesday);
        end
        
        function wednesday = get.Wednesday(obj)
            %get.Wednesday Get the value for property Wednesday
            wednesday = logical(obj.JavaMessage.getWednesday);
        end
        
        function set.Wednesday(obj, wednesday)
            %set.Wednesday Set the value for property Wednesday
            validateattributes(wednesday, {'logical', 'numeric'}, {'nonempty', 'scalar'}, 'ScheduleLeds', 'wednesday');
            
            obj.JavaMessage.setWednesday(wednesday);
        end
        
        function thursday = get.Thursday(obj)
            %get.Thursday Get the value for property Thursday
            thursday = logical(obj.JavaMessage.getThursday);
        end
        
        function set.Thursday(obj, thursday)
            %set.Thursday Set the value for property Thursday
            validateattributes(thursday, {'logical', 'numeric'}, {'nonempty', 'scalar'}, 'ScheduleLeds', 'thursday');
            
            obj.JavaMessage.setThursday(thursday);
        end
        
        function friday = get.Friday(obj)
            %get.Friday Get the value for property Friday
            friday = logical(obj.JavaMessage.getFriday);
        end
        
        function set.Friday(obj, friday)
            %set.Friday Set the value for property Friday
            validateattributes(friday, {'logical', 'numeric'}, {'nonempty', 'scalar'}, 'ScheduleLeds', 'friday');
            
            obj.JavaMessage.setFriday(friday);
        end
        
        function saturday = get.Saturday(obj)
            %get.Saturday Get the value for property Saturday
            saturday = logical(obj.JavaMessage.getSaturday);
        end
        
        function set.Saturday(obj, saturday)
            %set.Saturday Set the value for property Saturday
            validateattributes(saturday, {'logical', 'numeric'}, {'nonempty', 'scalar'}, 'ScheduleLeds', 'saturday');
            
            obj.JavaMessage.setSaturday(saturday);
        end
        
        function colon = get.Colon(obj)
            %get.Colon Get the value for property Colon
            colon = logical(obj.JavaMessage.getColon);
        end
        
        function set.Colon(obj, colon)
            %set.Colon Set the value for property Colon
            validateattributes(colon, {'logical', 'numeric'}, {'nonempty', 'scalar'}, 'ScheduleLeds', 'colon');
            
            obj.JavaMessage.setColon(colon);
        end
        
        function pm = get.Pm(obj)
            %get.Pm Get the value for property Pm
            pm = logical(obj.JavaMessage.getPm);
        end
        
        function set.Pm(obj, pm)
            %set.Pm Set the value for property Pm
            validateattributes(pm, {'logical', 'numeric'}, {'nonempty', 'scalar'}, 'ScheduleLeds', 'pm');
            
            obj.JavaMessage.setPm(pm);
        end
        
        function am = get.Am(obj)
            %get.Am Get the value for property Am
            am = logical(obj.JavaMessage.getAm);
        end
        
        function set.Am(obj, am)
            %set.Am Set the value for property Am
            validateattributes(am, {'logical', 'numeric'}, {'nonempty', 'scalar'}, 'ScheduleLeds', 'am');
            
            obj.JavaMessage.setAm(am);
        end
        
        function clock = get.Clock(obj)
            %get.Clock Get the value for property Clock
            clock = logical(obj.JavaMessage.getClock);
        end
        
        function set.Clock(obj, clock)
            %set.Clock Set the value for property Clock
            validateattributes(clock, {'logical', 'numeric'}, {'nonempty', 'scalar'}, 'ScheduleLeds', 'clock');
            
            obj.JavaMessage.setClock(clock);
        end
        
        function schedule = get.Schedule(obj)
            %get.Schedule Get the value for property Schedule
            schedule = logical(obj.JavaMessage.getSchedule);
        end
        
        function set.Schedule(obj, schedule)
            %set.Schedule Set the value for property Schedule
            validateattributes(schedule, {'logical', 'numeric'}, {'nonempty', 'scalar'}, 'ScheduleLeds', 'schedule');
            
            obj.JavaMessage.setSchedule(schedule);
        end
    end
    
    methods (Access = protected)
        function resetCache(obj)
            %resetCache Resets any cached properties
            obj.Cache.Header = [];
        end
        
        function cpObj = copyElement(obj)
            %copyElement Implements deep copy behavior for message
            
            % Call default copy method for shallow copy
            cpObj = copyElement@robotics.ros.Message(obj);
            
            % Clear any existing cached properties
            cpObj.resetCache;
            
            % Create a new Java message object
            cpObj.JavaMessage = obj.createNewJavaMessage;
            
            % Iterate over all primitive properties
            cpObj.Sunday = obj.Sunday;
            cpObj.Monday = obj.Monday;
            cpObj.Tuesday = obj.Tuesday;
            cpObj.Wednesday = obj.Wednesday;
            cpObj.Thursday = obj.Thursday;
            cpObj.Friday = obj.Friday;
            cpObj.Saturday = obj.Saturday;
            cpObj.Colon = obj.Colon;
            cpObj.Pm = obj.Pm;
            cpObj.Am = obj.Am;
            cpObj.Clock = obj.Clock;
            cpObj.Schedule = obj.Schedule;
            
            % Recursively copy compound properties
            cpObj.Header = copy(obj.Header);
        end
        
        function reload(obj, strObj)
            %reload Called by loadobj to assign properties
            obj.Sunday = strObj.Sunday;
            obj.Monday = strObj.Monday;
            obj.Tuesday = strObj.Tuesday;
            obj.Wednesday = strObj.Wednesday;
            obj.Thursday = strObj.Thursday;
            obj.Friday = strObj.Friday;
            obj.Saturday = strObj.Saturday;
            obj.Colon = strObj.Colon;
            obj.Pm = strObj.Pm;
            obj.Am = strObj.Am;
            obj.Clock = strObj.Clock;
            obj.Schedule = strObj.Schedule;
            obj.Header = feval([obj.StdMsgsHeaderClass '.loadobj'], strObj.Header);
        end
    end
    
    methods (Access = ?robotics.ros.Message)
        function strObj = saveobj(obj)
            %saveobj Implements saving of message to MAT file
            
            % Return an empty element if object array is empty
            if isempty(obj)
                strObj = struct.empty;
                return
            end
            
            strObj.Sunday = obj.Sunday;
            strObj.Monday = obj.Monday;
            strObj.Tuesday = obj.Tuesday;
            strObj.Wednesday = obj.Wednesday;
            strObj.Thursday = obj.Thursday;
            strObj.Friday = obj.Friday;
            strObj.Saturday = obj.Saturday;
            strObj.Colon = obj.Colon;
            strObj.Pm = obj.Pm;
            strObj.Am = obj.Am;
            strObj.Clock = obj.Clock;
            strObj.Schedule = obj.Schedule;
            strObj.Header = saveobj(obj.Header);
        end
    end
    
    methods (Static, Access = {?matlab.unittest.TestCase, ?robotics.ros.Message})
        function obj = loadobj(strObj)
            %loadobj Implements loading of message from MAT file
            
            % Return an empty object array if the structure element is not defined
            if isempty(strObj)
                obj = robotics.ros.custom.msggen.irobotcreate2.ScheduleLeds.empty(0,1);
                return
            end
            
            % Create an empty message object
            obj = robotics.ros.custom.msggen.irobotcreate2.ScheduleLeds;
            obj.reload(strObj);
        end
    end
end
