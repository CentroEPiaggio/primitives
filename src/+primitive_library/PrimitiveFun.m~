classdef PrimitiveFun
    properties
        chi; % Imagespace
%         Params q;
%         Mapping f;
cost_coeff;  % replace with an abstract function or sth else
cost_table;
    end
    methods
        % constructor
        function obj = PrimitiveFun(V,cost_coeff,cost_table) % TODO: PrimitiveFun(chi,q,f)
import primitive_library.*;
            if nargin == 3
                obj.chi = Imagespace(V);
                obj.cost_coeff = cost_coeff;
                obj.cost_table = cost_table;
            elseif nargin < 1
                obj.chi = Imagespace([-1 -1; -1 1; 1 -1; 1 1]*0.3);
            end
        end
        function eval(obj,q)
            % task-specific function that maps the parameter space to the
            % image space
            % here should go abstract functions over primitives
            chi = 2*q;
        end
        function c = cost(obj,q) % TODO: define better cost interface
            c = polyval(cost_coeff,q);
        end
        function q = findbest(obj,x_i,x_f)
            % recenter
            x_f = x_f-x_i;
            x_i = 0*x_i;
            cost = norm(x_f);
            find(norm(cost_table(1,:)-cost),
        end
    end
end